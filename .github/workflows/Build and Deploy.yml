name: Deploy to VM

on:
  push:
    branches: [ main ]  # Corretto: main invece di master

jobs:
  deploy:
    name: Deploy to VM
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH Key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to VM
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST }} << 'ENDSSH'
          set -e
          
          # Go to deployment directory
          cd ${{ secrets.DEPLOY_PATH }}
          
          # Remove old code if exists
          rm -rf go-cloud-backend
          
          # Clone latest code
          git clone https://github.com/${{ github.repository }}.git go-cloud-backend
          cd go-cloud-backend
          
          # Create .env file
          cat > .env << EOF
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        COMMIT_SHA=${{ github.sha }}
        COMMIT_REF=${{ github.ref_name }}
        DEPLOYMENT_TIME=$(date -u +%Y%m%d_%H%M%S)
        EOF
            # Stop current services if running
          docker-compose -f docker-compose.prod.yml down || true
          
          # Clean Docker cache to force Go 1.23 download
          echo "🧹 Cleaning Docker cache..."
          docker rmi golang:1.21-alpine || true
          docker rmi $(docker images 'go-cloud-backend*' -q) || true
          docker system prune -f
          docker pull golang:1.23-alpine
          
          # Build and start services
          echo "🚀 Building and starting services..."
          docker-compose -f docker-compose.prod.yml build --no-cache --pull
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be ready
          echo "⏳ Waiting for services..."
          sleep 30
          
          # Health check
          echo "🏥 Health checking services..."
          if curl -f http://localhost:3000/health; then
            echo "✅ Gateway is healthy"
          else
            echo "❌ Gateway health check failed"
            exit 1
          fi
          
          if curl -f http://localhost:3001/health; then
            echo "✅ Auth service is healthy"
          else
            echo "❌ Auth service health check failed"
            exit 1
          fi
          
          if curl -f http://localhost:3002/health; then
            echo "✅ User service is healthy"
          else
            echo "❌ User service health check failed"
            exit 1
          fi
          
          echo "🎉 Deployment completed successfully!"
          docker-compose -f docker-compose.prod.yml ps
        ENDSSH
