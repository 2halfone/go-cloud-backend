name: Build and Deploy to VM

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: go-microservices

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and Push Gateway Image
      uses: docker/build-push-action@v5
      with:
        context: ./gateway
        file: ./gateway/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-gateway:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-gateway:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and Push Auth Service Image
      uses: docker/build-push-action@v5
      with:
        context: ./auth-service
        file: ./auth-service/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-auth:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-auth:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and Push User Service Image
      uses: docker/build-push-action@v5
      with:
        context: ./user-service
        file: ./user-service/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-user:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_PREFIX }}-user:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to VM
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH Key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to VM
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST }} << 'ENDSSH'
          set -e
          
          # Go to deployment directory
          cd ${{ secrets.DEPLOY_PATH }}
          
          # Create new .env file with updated image tags
          cat > .env << EOF
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
        IMAGE_TAG=${{ github.sha }}
        COMMIT_SHA=${{ github.sha }}
        COMMIT_REF=${{ github.ref_name }}
        DEPLOYMENT_TIME=$(date -u +%Y%m%d_%H%M%S)
        EOF
          
          # Run deployment script
          echo "🚀 Starting automated deployment..."
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh
          
          echo "✅ Deployment completed successfully!"
        ENDSSH

    - name: Verify Deployment
      run: |
        # Wait a bit for services to be fully ready
        sleep 30
        
        # Test the deployed application
        if curl -f "http://${{ secrets.HOST }}/health"; then
          echo "✅ Deployment verification successful!"
        else
          echo "❌ Deployment verification failed!"
          exit 1
        fi
