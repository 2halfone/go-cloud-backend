version: '3.8'

services:
  gateway:
    build:
      context: .
      dockerfile: ./gateway/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - auth-service
      - user-service
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # --- Database per i log di autenticazione ---
  auth-db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: auth_admin
      POSTGRES_PASSWORD: auth_password
      POSTGRES_DB: auth_logs_db
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    networks:
      - microservices-net  # --- Auth Service (aggiornato con database) ---
  auth-service:
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    ports:
      - "3001:3001"  # SOLO per WebSocket real-time events (frontend Flutter)
    environment:
      # stringa di connessione al nuovo PostgreSQL
      AUTH_DATABASE_URL: postgres://auth_admin:auth_password@auth-db:5432/auth_logs_db?sslmode=disable
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - auth-db
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # --- Database per i dati degli utenti ---0
  user-db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: user_admin
      POSTGRES_PASSWORD: user_password
      POSTGRES_DB: users_db
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - microservices-net  # --- User Service (aggiornato con database) ---
  user-service:
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    # ports: - "3002:3002"  # RIMOSSO - Solo rete Docker interna
    environment:
      # stringa di connessione al nuovo PostgreSQL
      USER_DATABASE_URL: postgres://user_admin:user_password@user-db:5432/users_db?sslmode=disable
      # stringa di connessione al database auth-service per sincronizzazione utenti
      AUTH_DATABASE_URL: postgres://auth_admin:auth_password@auth-db:5432/auth_logs_db?sslmode=disable
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - user-db
      - auth-db
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3  # --- Node Exporter for System Metrics ---
  node-exporter:
    image: prom/node-exporter:latest
    # ports: - "9100:9100"  # RIMOSSO - Solo rete Docker interna per sicurezza
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - microservices-net
    restart: unless-stopped  # --- Prometheus Monitoring Service ---
  prometheus-service:
    build:
      context: .
      dockerfile: ./monitoring/prometheus-service/Dockerfile
    # ports: - "9090:9090"  # RIMOSSO - Solo rete Docker interna per sicurezza
    depends_on:
      - node-exporter
    networks:
      - microservices-net
    restart: unless-stopped
  # --- Dashboard API Service ---
  dashboard-api:
    build:
      context: .
      dockerfile: ./monitoring/dashboard-api/Dockerfile
    # ports: - "3003:3003"  # RIMOSSO - Solo rete Docker interna
    environment:
      # Database connections for metrics collection
      AUTH_DATABASE_URL: postgres://auth_admin:auth_password@auth-db:5432/auth_logs_db?sslmode=disable
      USER_DATABASE_URL: postgres://user_admin:user_password@user-db:5432/users_db?sslmode=disable
      PROMETHEUS_URL: http://prometheus-service:9090
    depends_on:
      - prometheus-service
      - auth-db
      - user-db
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  # --- Portainer ---
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - microservices-net

networks:
  microservices-net:
    driver: bridge

volumes:
  auth_db_data:
    driver: local
  user_db_data:
    driver: local
  portainer_data:
    driver: local
